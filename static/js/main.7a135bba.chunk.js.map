{"version":3,"sources":["components/Wrapper.js","components/Content.js","Context.js","components/Header.js","components/WeatherSearch.js","components/InversionLikelihood.js","components/About.js","components/Error.js","components/DateTime.js","components/Tagline.js","components/Footer.js","components/Main.js","App.js","index.js"],"names":["Wrapper","props","className","children","Content","Context","createContext","Header","WeatherSearch","api_call","useContext","onSubmit","name","autoComplete","type","placeholder","InversionLikelihood","nightTemp","wind","clouds","pressure","weather","humidity","city","temp","console","log","About","Error","error","DateTime","date","Date","toLocaleDateString","toLocaleTimeString","Tagline","Footer","rel","target","href","Main","useState","setWeather","setCity","sunrise","setSunrise","sunset","setSunset","setError","setNightTemp","setWind","setPressure","setClouds","setHumidity","e","a","preventDefault","location","elements","value","API_KEY","currentDayUrl","request","axios","get","response","data","main","sys","forecastUrl","requestForecast","responseForecast","todayDate","nextDayDate","getTime","formattedDate","Moment","format","filteredList","list","filter","t","dt_txt","speed","description","Provider","App","ReactDOM","render","document","getElementById"],"mappings":"sNAUeA,G,YARC,SAACC,GACb,OACI,yBAAKC,UAAU,WACVD,EAAME,Y,+CCOJC,EARC,SAACH,GACb,OACI,yBAAKC,UAAU,WACVD,EAAME,WCGJE,EALCC,0B,gBCIDC,EAPA,kBACX,yBAAKL,UAAU,UACX,wBAAIA,UAAU,iBAAd,+BCgBOM,EAhBO,WAAO,IAElBC,EAAYC,qBAAWL,GAAvBI,SAEP,OACI,yBAAKP,UAAU,kBACX,0BAAMS,SAAUF,EAAUP,UAAU,wBAChC,2BAAOU,KAAK,WAAWC,aAAa,MAAMX,UAAU,wBAAwBY,KAAK,OAAOC,YAAY,gBACpG,yBAAKb,UAAU,0BACX,4BAAQA,UAAU,0BAAlB,cC0ELc,G,MAnFa,WAAO,IAAD,EAGyCN,qBAAWL,GAA1EY,EAHsB,EAGtBA,UAAWC,EAHW,EAGXA,KAAgBC,GAHL,EAGLC,SAHK,EAGKD,QAAQE,EAHb,EAGaA,QAAeC,GAH5B,EAGsBC,KAHtB,EAG4BD,UAClDE,EAASH,EAATG,KA+CR,OAFAC,QAAQC,MAIJ,yBAAKxB,UAAU,gBAGX,yBAAKA,UAAU,qBAEX,gDAAsBsB,EAAtB,KACA,4CAAkBP,EAAlB,KACA,kDAAwBC,EAAxB,KACA,gDAAsBI,EAAtB,KACA,+CAAqBH,EAArB,MAIJ,yBAAKjB,UAAU,qBAEVe,EAAY,IAAMO,EAAO,IAAMN,EAAO,GAAKI,EAAW,KAAkB,cAAXH,GAC5C,eAAXA,GACW,qBAAXA,IAGH,iFAPR,IAUM,2ECvCHQ,EAvCD,WAIV,OAEI,yBAAKzB,UAAU,gBAIX,yBAAKA,UAAU,qBAEX,sGAGI,0EAIA,4DAGA,4DAGA,qFCpBL0B,EAJD,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAF,OACV,yBAAK3B,UAAU,SAAf,IAAyB2B,EAAzB,MCWWC,EAZE,WAGb,IAAMC,EAAO,IAAIC,KAEjB,OACI,yBAAK9B,UAAU,aAAf,UACQ6B,EAAKE,qBADb,cACuCF,EAAKG,wBCDrCC,EANC,kBACZ,yBAAKjC,UAAU,WACX,sGCIOkC,EANA,kBACX,yBAAKlC,UAAU,UAAf,gBACiB,uBAAGmC,IAAI,sBAAsBC,OAAO,SAASC,KAAK,gCAAlD,iBCuINC,EA1HF,WAAO,IAAD,EAEeC,qBAFf,mBAERpB,EAFQ,KAECqB,EAFD,OAISD,qBAJT,mBAIRlB,EAJQ,KAIFoB,EAJE,OAMeF,qBANf,mBAMRG,EANQ,KAMCC,EAND,OAQaJ,qBARb,mBAQRK,EARQ,KAQAC,EARA,OAUWN,qBAVX,mBAURZ,EAVQ,KAUDmB,EAVC,OAgBmBP,qBAhBnB,mBAgBRxB,EAhBQ,KAgBGgC,EAhBH,OAiBSR,qBAjBT,mBAiBRvB,EAjBQ,KAiBFgC,EAjBE,OAkBiBT,qBAlBjB,mBAkBRrB,EAlBQ,KAkBE+B,EAlBF,OAmBaV,qBAnBb,mBAmBRtB,EAnBQ,KAmBAiC,EAnBA,OAoBiBX,qBApBjB,oBAoBRnB,GApBQ,MAoBE+B,GApBF,MAsBT5C,GAAQ,uCAAG,WAAM6C,GAAN,qCAAAC,EAAA,yDAEbD,EAAEE,iBAEIC,EAAWH,EAAEhB,OAAOoB,SAASD,SAASE,MAEtCC,EAAU,mCAIXH,EAVQ,0CAWTT,EAAS,qCACVN,EAAW,QAZD,cAePmB,EAfO,4DAe8DJ,EAf9D,kBAegFG,EAfhF,iBAgBbnC,QAAQC,IAAImC,GACNC,EAAUC,IAAMC,IAAIH,GAjBb,UAkBUC,EAlBV,eAkBPG,EAlBO,OAsBbvB,EAAWuB,EAASC,KAAKC,MACzBxB,EAAQsB,EAASC,KAAKtD,MACtBiC,EAAWoB,EAASC,KAAKE,IAAIxB,SAC7BG,EAAUkB,EAASC,KAAKE,IAAItB,QAE5BrB,QAAQC,IAAI,oBAAqBuC,EAASC,KAAKC,KAAK3C,MAK9C6C,EAhCO,6DAgC6DZ,EAhC7D,kBAgC+EG,EAhC/E,iBAiCPU,EAAkBP,IAAMC,IAAIK,GAjCrB,UAkCkBC,EAlClB,QAkCPC,EAlCO,OAoCb9C,QAAQC,IAAI,oBAAqB2C,GACjC5C,QAAQC,IAAI6C,GAERC,EAAY,IAAIxC,KAChByC,EAAc,IAAIzC,KAAKwC,EAAUE,UAAa,OAC5CC,EAAgBC,IAAOH,GAAaI,OAAO,cAG3CC,EAAeP,EAAiBL,KAAKa,KAAKC,QAAO,SAAAC,GAAC,OAAGA,EAAEC,SAAF,UAAgBP,EAAhB,gBAC3DlD,QAAQC,IAAI,gBAAiBoD,GAG7B7B,EAAa6B,EAAa,GAAGX,KAAK3C,MAClC0B,EAAQ4B,EAAa,GAAG5D,KAAKiE,OAC7BhC,EAAY2B,EAAa,GAAGX,KAAK/C,UACjCgC,EAAU0B,EAAa,GAAGzD,QAAQ,GAAG+D,aACrC/B,GAAYyB,EAAa,GAAGX,KAAK7C,UACjCG,QAAQC,IAAI,kBAAmBoD,EAAa,GAAGX,KAAK3C,MACpDC,QAAQC,IAAI,wBAAyBoD,EAAa,GAAG5D,KAAKiE,OAC1D1D,QAAQC,IAAI,2BAA4BoD,EAAa,GAAGX,KAAK/C,UAC7DK,QAAQC,IAAI,sCAAuCoD,EAAa,GAAGzD,QAAQ,GAAG+D,aAC9E3D,QAAQC,IAAI,2BAA4BoD,EAAa,GAAGX,KAAK7C,UAI7D0B,EAAS,MA7DI,4CAAH,sDAiEd,OACI,yBAAK9C,UAAU,QACX,kBAAC,EAAD,MACA,kBAAC,EAAD,KACI,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAQmF,SAAT,CAAkB1B,MAAO,CAAClD,YAAUY,UAASE,OAAMqB,UAASE,SAAQ7B,YAAWC,OAAME,WAAUD,SAAQG,cAEnG,kBAAC,EAAD,OAWED,GAAW,kBAAC,EAAD,MAEZA,GAAW,kBAAC,EAAD,MAGXQ,GAAS,kBAAC,EAAD,CAAOA,MAAOA,KAG5B,kBAAC,EAAD,SCtHDyD,EARH,WACV,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,QCHNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,W","file":"static/js/main.7a135bba.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Wrapper = (props) => {\r\n    return (\r\n        <div className=\"wrapper\">\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Wrapper","import React from 'react';\r\n\r\n\r\n\r\nconst Content = (props) => {\r\n    return(\r\n        <div className='content'>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Content;","import { createContext } from 'react'\r\nimport Content from './components/Content'\r\n\r\n// Context lets you create one instance of the data that you want other components to use. This data can then be accessed by any component\r\n\r\nconst Context = createContext()\r\n\r\n\r\n\r\n\r\nexport default Context","import React from 'react'\r\n\r\nconst Header = () => (\r\n    <div className='header'>\r\n        <h1 className='header__title'> Cloud Inversion Checker </h1>\r\n    </div>\r\n)\r\n\r\n\r\nexport default Header","import React, {useContext} from 'react'\r\n\r\nimport Context from '../Context'\r\n\r\nconst WeatherSearch = () => {\r\n\r\n    const {api_call} = useContext(Context)\r\n\r\n    return (\r\n        <div className=\"weather-search\">\r\n            <form onSubmit={api_call} className=\"weather-search__form\">\r\n                <input name=\"location\" autoComplete=\"off\" className=\"weather-search__input\" type=\"text\" placeholder=\"search city\"/>\r\n                <div className=\"weather-search__submit\">\r\n                    <button className=\"weather-search__button\">&rarr;</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WeatherSearch","import React, { useContext } from 'react'\r\n\r\nimport Context from '../Context'\r\n\r\nconst InversionLikelihood = () => {\r\n\r\n\r\n    const { nightTemp, wind, pressure, clouds, weather, city, humidity } = useContext(Context)\r\n    const { temp } = weather\r\n\r\n    /* \r\n    Const meaning\r\n    City = Location search \r\n    Night Temp = Temperature at 3am\r\n    Wind = Wind speed at 3am\r\n    Pressure = Pressure at 3am\r\n    Cloud = Clouds at 3am\r\n\r\n    Temp = Current temperature (at time of search)\r\n    \r\n    */\r\n\r\n\r\n\r\n    /*\r\n        <p> \r\n        \r\n        Look out for high pressure. \r\n            \r\n        Low wind speeds\r\n\r\n        Clear skies\r\n            \r\n        Warm during the day \r\n\r\n        Cold overnight\r\n\r\n\r\n        High humidity \r\n\r\n        Temperature dropping to the dew point\r\n        </p>\r\n\r\n\r\n        11 July Day 8pm: 14 c\r\n        Max Wind Speed: 7mph\r\n        Humidity: 67%\r\n\r\n        12 July: 12am wind = 1mph, 9 c, fair, humidity = 93%\r\n        12 July: 5.20am wind = 1mph: 6 c, fair, humidity = 100%\r\n\r\n    */\r\n\r\n    console.log()\r\n\r\n    return (\r\n\r\n        <div className=\"weather-data\">\r\n\r\n\r\n            <div className=\"weather-data__box\">\r\n\r\n                <p> Current Temp is: {temp} </p>\r\n                <p> 3am Temp is: {nightTemp} </p>\r\n                <p> 3am Wind Speed is: {wind} </p>\r\n                <p> 3am Humidity is: {humidity} </p>\r\n                <p> 3am Clouds are: {clouds} </p>\r\n\r\n            </div>\r\n\r\n            <div className=\"weather-data__box\">\r\n                {/* If 3am temp is less than 9 degrees, current search time temp is more than 14, wind speed is less than 2mph and clouds are clear sky or few clouds or scattered clouds*/}\r\n                {nightTemp < 10 && temp > 14 && wind < 2 && humidity > 85 && (clouds === 'clear sky'\r\n                    || clouds === 'few clouds'\r\n                    || clouds === 'scattered clouds')\r\n                    &&\r\n\r\n                    <p> There is a chance of an cloud inversion occuring </p>\r\n\r\n\r\n                } <p> Unlikely you will get a cloud inversion</p>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default InversionLikelihood","import React, { useContext } from 'react'\r\n\r\nconst About = () => {\r\n\r\n\r\n\r\n    return (\r\n\r\n        <div className=\"weather-data\">\r\n\r\n\r\n\r\n            <div className=\"weather-data__box\">\r\n\r\n                <p> The way this app calculates the likelihood of an cloud inversion is if:\r\n\r\n                    \r\n                    <li>\r\n                        Temperature at 3am is less than 10 Degrees\r\n\r\n                    </li>\r\n                    <li>\r\n                        Wind speed is less than 2mph\r\n                    </li>\r\n                    <li>\r\n                        Humidity is greater than 85%\r\n                    </li>\r\n                    <li>\r\n                        The skies are either clear or few clouds present.\r\n                    </li>\r\n                </p>\r\n\r\n\r\n            </div>\r\n\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default About","import React from 'react'\r\n\r\n\r\nconst Error = ({error}) => (\r\n    <div className='error'> {error} </div>\r\n)\r\n\r\nexport default Error","import React from 'react'\r\n\r\n\r\nconst DateTime = () => {\r\n\r\n\r\n    const date = new Date()\r\n\r\n    return (\r\n        <div className='date-time'>\r\n            {`${date.toLocaleDateString()} - ${date.toLocaleTimeString()}`}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DateTime","import React from 'react'\r\n\r\n\r\nconst Tagline = () => (\r\n    <div className='tagline'> \r\n        <p> Enter the name of a location to know if cloud inversion is likely:  </p>\r\n    </div>\r\n)\r\n\r\nexport default Tagline","import React from 'react'\r\n\r\n\r\nconst Footer = () => (\r\n    <div className='footer'> \r\n        Developed by <a rel='noopener noreferrer' target='_blank' href=\"https://www.soyebpatel.co.uk\">Soyeb Patel</a>\r\n    </div>\r\n)\r\n\r\nexport default Footer","import React, { useState } from 'react'\r\nimport axios from 'axios'\r\nimport Context from '../Context'\r\n\r\nimport Moment from 'moment'\r\n\r\nimport Header from './Header'\r\nimport Content from './Content'\r\nimport WeatherSearch from './WeatherSearch'\r\nimport OvernightInfo from './OvernightInfo'\r\nimport WeatherData from './WeatherData'\r\nimport InversionLikelihood from './InversionLikelihood'\r\nimport About from './About'\r\nimport Error from './Error'\r\nimport DateTime from './DateTime'\r\nimport Tagline from './Tagline'\r\nimport Footer from './Footer'\r\n\r\nconst Main = () => {\r\n\r\n    const [weather, setWeather] = useState()\r\n\r\n    const [city, setCity] = useState()\r\n\r\n    const [sunrise, setSunrise] = useState()\r\n\r\n    const [sunset, setSunset] = useState()\r\n\r\n    const [error, setError] = useState()\r\n\r\n\r\n            // Const for overnight data\r\n\r\n\r\n    const [nightTemp, setNightTemp] = useState()\r\n    const [wind, setWind] = useState()\r\n    const [pressure, setPressure] = useState()\r\n    const [clouds, setClouds] = useState()\r\n    const [humidity, setHumidity] = useState()\r\n    // This is an Async Await call. Until Axios successfully recieves the data, we wont go further\r\n    const api_call = async e => {\r\n\r\n        e.preventDefault();\r\n\r\n        const location = e.target.elements.location.value;\r\n\r\n        const API_KEY = '8f3392b07d6c3fbedeb6b9f37746b4bb';\r\n\r\n\r\n        // If location is blank, display error message and hide previous weather information\r\n        if (!location) return (\r\n            setError('Please enter the name of the city')\r\n        ), setWeather(null)\r\n            \r\n\r\n        const currentDayUrl = `https://api.openweathermap.org/data/2.5/weather?q=${location}&appid=${API_KEY}&units=metric`;\r\n        console.log(currentDayUrl)\r\n        const request = axios.get(currentDayUrl);\r\n        const response = await request;\r\n\r\n\r\n        // setWeather will assign the value of response to weather\r\n        setWeather(response.data.main);\r\n        setCity(response.data.name)\r\n        setSunrise(response.data.sys.sunrise)\r\n        setSunset(response.data.sys.sunset)\r\n\r\n        console.log('Current temp is: ', response.data.main.temp)\r\n\r\n\r\n\r\n        // Forecast Code\r\n        const forecastUrl = `https://api.openweathermap.org/data/2.5/forecast?q=${location}&appid=${API_KEY}&units=metric`\r\n        const requestForecast = axios.get(forecastUrl);\r\n        const responseForecast = await requestForecast;\r\n\r\n        console.log('forecast url is: ', forecastUrl)\r\n        console.log(responseForecast)\r\n        \r\n        var todayDate = new Date();\r\n        var nextDayDate = new Date(todayDate.getTime() + (24 * 60 * 60 * 1000))\r\n        const formattedDate = Moment(nextDayDate).format('YYYY-MM-DD');\r\n    \r\n\r\n        const filteredList = responseForecast.data.list.filter(t=> t.dt_txt === `${formattedDate} 03:00:00`);\r\n        console.log('Filtered list', filteredList)\r\n       \r\n        // 3am weather detail \r\n        setNightTemp(filteredList[0].main.temp);\r\n        setWind(filteredList[0].wind.speed);\r\n        setPressure(filteredList[0].main.pressure)\r\n        setClouds(filteredList[0].weather[0].description)\r\n        setHumidity(filteredList[0].main.humidity)\r\n        console.log('Night temp is: ', filteredList[0].main.temp);\r\n        console.log('Night Wind Speed is: ', filteredList[0].wind.speed);\r\n        console.log('Night Time Pressure is: ', filteredList[0].main.pressure);\r\n        console.log('Night Time Weather Description is: ', filteredList[0].weather[0].description);\r\n        console.log('Night Time Humidity is: ', filteredList[0].main.humidity);\r\n\r\n\r\n        // If everything goes well, then seterror to null\r\n        setError(null)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='main'>\r\n            <Header />\r\n            <Content>\r\n                <DateTime />\r\n                <Tagline />\r\n                <Context.Provider value={{api_call, weather, city, sunrise, sunset, nightTemp, wind, pressure, clouds, humidity}}>\r\n                    {/* We give access to api call in the WeatherSearch component */}\r\n                    <WeatherSearch/>\r\n\r\n\r\n                    \r\n\r\n                    {/* If a location has been searched for, then pass on the value to the WeatherData component */}\r\n                    {/* {weather && <WeatherData/>}\r\n\r\n                    {weather && <OvernightInfo/>} */}\r\n\r\n                    {/* This component will hold the information which will say how this app works.  If weather is not searched for then show this info*/}\r\n                    {!weather && <About /> }\r\n\r\n                    {weather && <InversionLikelihood/>}\r\n\r\n                    {/* If search is blank then display error */}\r\n                    {error && <Error error={error}/>}\r\n                    \r\n                </Context.Provider>\r\n                <Footer />\r\n            </Content>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Main","import React from \"react\"\r\n\r\n// Components\r\nimport Wrapper from './components/Wrapper'\r\nimport Main from './components/Main'\r\n \r\nconst App = () => {\r\n  return (\r\n    <Wrapper>\r\n      <Main />\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default App","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport \"./styles/styles.scss\"\r\nimport App from \"./App\"\r\n\r\nReactDOM.render(<App/>, document.getElementById(\"root\"))"],"sourceRoot":""}