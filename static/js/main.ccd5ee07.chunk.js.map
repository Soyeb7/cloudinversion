{"version":3,"sources":["components/Wrapper.js","Context.js","components/Header.js","components/Content.js","components/WeatherSearch.js","components/InversionLikelihood.js","components/About.js","components/Error.js","components/DateTime.js","components/Tagline.js","components/Footer.js","components/Main.js","App.js","index.js"],"names":["Wrapper","props","className","children","Context","createContext","Header","Content","WeatherSearch","api_call","useContext","onSubmit","name","autoComplete","type","placeholder","InversionLikelihood","weatherData","city","surfaceTemp","current_weather","temperature","tempsAtLevels","map","level","hourly","relativeHumidity","relativehumidity_2m","dewPoint","dewpoint_2m","windSpeed","windspeed_10m","isInversion","some","temp","likelihoodMessage","About","Error","error","DateTime","date","Date","toLocaleDateString","toLocaleTimeString","Tagline","Footer","rel","target","href","Main","useState","setWeatherData","setCity","setError","e","a","preventDefault","location","elements","value","axios","get","geoResponse","data","results","length","latitude","longitude","meteoResponse","console","Provider","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ccd5ee07.chunk.js","sourcesContent":["import React from 'react'\n\nconst Wrapper = (props) => {\n    return (\n        <div className=\"wrapper\">\n            {props.children}\n        </div>\n    )\n}\n\nexport default Wrapper","import { createContext } from 'react'\n\n// Context lets you create one instance of the data that you want other components to use. This data can then be accessed by any component\n\nconst Context = createContext()\n\n\n\n\nexport default Context","import React from 'react'\n\nconst Header = () => (\n    <div className='header'>\n        <h1 className='header__title'> Cloud Inversion Checker </h1>\n    </div>\n)\n\n\nexport default Header","import React from 'react';\n\n\n\nconst Content = (props) => {\n    return(\n        <div className='content'>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Content;","import React, { useContext } from 'react';\nimport Context from '../Context';\n\nconst WeatherSearch = () => {\n  const { api_call } = useContext(Context);\n\n  return (\n    <div className=\"weather-search\">\n      <form onSubmit={api_call} className=\"weather-search__form\">\n        <input\n          name=\"location\"\n          autoComplete=\"off\"\n          className=\"weather-search__input\"\n          type=\"text\"\n          placeholder=\"Search city\"\n        />\n        <div className=\"weather-search__submit\">\n          <button className=\"weather-search__button\">&rarr;</button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default WeatherSearch;\n","import React, { useContext } from 'react';\nimport Context from '../Context';\n\nconst InversionLikelihood = () => {\n  const { weatherData, city } = useContext(Context);\n\n  if (!weatherData) return null;\n\n  // Extract necessary data\n  const surfaceTemp = weatherData.current_weather.temperature;\n  const pressureLevels = ['850hPa', '700hPa'];\n  const tempsAtLevels = pressureLevels.map((level) => {\n    return weatherData.hourly[`temperature_${level}`][0];\n  });\n\n  const relativeHumidity = weatherData.hourly.relativehumidity_2m[0];\n  const dewPoint = weatherData.hourly.dewpoint_2m[0];\n  const windSpeed = weatherData.hourly.windspeed_10m[0];\n\n  // Check for temperature inversion\n  const isInversion = tempsAtLevels.some(temp => temp > surfaceTemp);\n\n  // Assess likelihood\n  let likelihoodMessage = '';\n\n  if (isInversion && relativeHumidity > 80 && windSpeed < 3 && surfaceTemp <= dewPoint + 2) {\n    likelihoodMessage = 'High likelihood of a cloud inversion occurring due to strong temperature inversion, high humidity, and low wind speeds.';\n  } else if (isInversion) {\n    likelihoodMessage = 'Possible inversion, but conditions may not be ideal for cloud formation due to low humidity or high wind speeds.';\n  } else {\n    likelihoodMessage = 'Low likelihood of a cloud inversion occurring.';\n  }\n\n  return (\n    <div className=\"weather-data\">\n      <h2>Inversion Analysis for {city}</h2>\n      <div className=\"weather-data__box\">\n        <p><strong>Surface Temperature:</strong> {surfaceTemp} 째C</p>\n        <p><strong>Temperature at 850 hPa:</strong> {tempsAtLevels[0]} 째C</p>\n        <p><strong>Temperature at 700 hPa:</strong> {tempsAtLevels[1]} 째C</p>\n        <p><strong>Relative Humidity at Surface:</strong> {relativeHumidity}%</p>\n        <p><strong>Dew Point at Surface:</strong> {dewPoint} 째C</p>\n        <p><strong>Wind Speed:</strong> {windSpeed} m/s</p>\n      </div>\n      <div className=\"weather-data__box\">\n        <p className=\"likelihood-message\">{likelihoodMessage}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default InversionLikelihood;\n","import React from 'react';\n\nconst About = () => {\n  return (\n    <div className=\"weather-data\">\n      <div className=\"weather-data__box\">\n        <p>\n          This application calculates the likelihood of a cloud inversion by analyzing atmospheric\n          data, including temperature profiles and humidity at different altitudes. It considers:\n          <ul>\n            <li>Presence of a temperature inversion layer.</li>\n            <li>High relative humidity below the inversion layer.</li>\n            <li>Stable atmospheric conditions.</li>\n          </ul>\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default About;\n","import React from 'react';\n\nconst Error = ({ error }) => {\n  return (\n    <div className=\"error\">\n      <p>{error}</p>\n    </div>\n  );\n};\n\nexport default Error;\n","import React from 'react'\n\n\nconst DateTime = () => {\n\n\n    const date = new Date()\n\n    return (\n        <div className='date-time'>\n            {`${date.toLocaleDateString()} - ${date.toLocaleTimeString()}`}\n        </div>\n    )\n}\n\nexport default DateTime","import React from 'react';\n\nconst Tagline = () => (\n  <div className=\"tagline\">\n    <p>Enter the name of a location to know if a cloud inversion is likely:</p>\n  </div>\n);\n\nexport default Tagline;\n","import React from 'react'\n\n\nconst Footer = () => (\n    <div className='footer'> \n        Developed by <a rel='noopener noreferrer' target='_blank' href=\"https://www.soyebpatel.co.uk\">Soyeb Patel</a>\n    </div>\n)\n\nexport default Footer","import React, { useState } from 'react';\nimport axios from 'axios';\nimport Context from '../Context';\n\nimport Header from './Header';\nimport Content from './Content';\nimport WeatherSearch from './WeatherSearch';\nimport InversionLikelihood from './InversionLikelihood';\nimport About from './About';\nimport Error from './Error';\nimport DateTime from './DateTime';\nimport Tagline from './Tagline';\nimport Footer from './Footer';\n\nconst Main = () => {\n  const [weatherData, setWeatherData] = useState(null);\n  const [city, setCity] = useState();\n  const [error, setError] = useState();\n\n  // Function to fetch atmospheric data\n  const api_call = async (e) => {\n    e.preventDefault();\n\n    const location = e.target.elements.location.value;\n\n    if (!location) {\n      setError('Please enter the name of the city');\n      setWeatherData(null);\n      return;\n    }\n\n    try {\n      // Geocoding API to get latitude and longitude\n      const geoResponse = await axios.get(\n        `https://geocoding-api.open-meteo.com/v1/search?name=${location}`\n      );\n\n      if (!geoResponse.data.results || geoResponse.data.results.length === 0) {\n        setError('Location not found');\n        setWeatherData(null);\n        return;\n      }\n\n      const { latitude, longitude, name } = geoResponse.data.results[0];\n      setCity(name);\n\n      // Fetch atmospheric data including dew point and wind speed\n      const meteoResponse = await axios.get(\n        `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&hourly=temperature_2m,relativehumidity_2m,pressure_msl,temperature_850hPa,temperature_700hPa,dewpoint_2m,windspeed_10m&start=current&current_weather=true`\n      );\n\n      setWeatherData(meteoResponse.data);\n      setError(null);\n    } catch (err) {\n      console.error(err);\n      setError('An error occurred while fetching data');\n      setWeatherData(null);\n    }\n  };\n\n  return (\n    <div className=\"main\">\n      <Header />\n      <Content>\n        <DateTime />\n        <Tagline />\n        <Context.Provider value={{ api_call, weatherData, city }}>\n          <WeatherSearch />\n          {!weatherData && !error && <About />}\n          {weatherData && <InversionLikelihood />}\n          {error && <Error error={error} />}\n        </Context.Provider>\n        <Footer />\n      </Content>\n    </div>\n  );\n};\n\nexport default Main;\n","import React from \"react\"\n\n// Components\nimport Wrapper from './components/Wrapper'\nimport Main from './components/Main'\n \nconst App = () => {\n  return (\n    <Wrapper>\n      <Main />\n    </Wrapper>\n  )\n}\n\nexport default App","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport \"./styles/styles.scss\"\nimport App from \"./App\"\n\nReactDOM.render(<App/>, document.getElementById(\"root\"))"],"sourceRoot":""}