{"version":3,"sources":["components/Wrapper.js","Context.js","components/Header.js","components/Content.js","components/WeatherSearch.js","components/InversionLikelihood.js","components/About.js","components/Error.js","components/DateTime.js","components/Tagline.js","components/Footer.js","components/Main.js","components/IdealConditions.js","App.js","index.js"],"names":["Wrapper","props","className","children","Context","createContext","Header","Content","WeatherSearch","api_call","useContext","onSubmit","name","autoComplete","type","placeholder","InversionLikelihood","weatherData","city","surfaceTemp","current_weather","temperature","tempsAtLevels","map","level","hourly","relativeHumidity","relativehumidity_2m","dewPoint","dewpoint_2m","windSpeed","windspeed_10m","isInversion","some","temp","likelihoodMessage","likelihoodClass","About","to","onClick","ReactGA","event","category","action","href","e","preventDefault","window","location","Error","error","DateTime","date","Date","toLocaleDateString","toLocaleTimeString","Tagline","Footer","rel","target","Main","useState","setWeatherData","setCity","setError","a","elements","value","axios","get","geoResponse","data","results","length","latitude","longitude","meteoResponse","likelihood","calculateInversionLikelihood","console","higherAltitudeTemp","temperature_850hPa","humidity","Provider","IdealConditions","AppContent","useLocation","useEffect","initialize","send","hitType","page","pathname","search","path","element","App","ReactDOM","render","document","getElementById"],"mappings":"mQAUeA,EARC,SAACC,GACb,OACI,yBAAKC,UAAU,WACVD,EAAME,W,+CCIJC,EALCC,0BCKDC,EAPA,kBACX,yBAAKJ,UAAU,UACX,wBAAIA,UAAU,iBAAd,+BCQOK,EARC,SAACN,GACb,OACI,yBAAKC,UAAU,WACVD,EAAME,WCiBJK,EArBO,WAAO,IACnBC,EAAaC,qBAAWN,GAAxBK,SAER,OACE,yBAAKP,UAAU,kBACb,0BAAMS,SAAUF,EAAUP,UAAU,wBAClC,2BACEU,KAAK,WACLC,aAAa,MACbX,UAAU,wBACVY,KAAK,OACLC,YAAY,gBAEd,yBAAKb,UAAU,0BACb,4BAAQA,UAAU,0BAAlB,cCqCKc,EAnDa,WAAO,IAAD,EACFN,qBAAWN,GAAjCa,EADwB,EACxBA,YAAaC,EADW,EACXA,KAErB,IAAKD,EAAa,OAAO,KAGzB,IAAME,EAAcF,EAAYG,gBAAgBC,YAE1CC,EADiB,CAAC,SAAU,UACGC,KAAI,SAACC,GACxC,OAAOP,EAAYQ,OAAZ,sBAAkCD,IAAS,MAG9CE,EAAmBT,EAAYQ,OAAOE,oBAAoB,GAC1DC,EAAWX,EAAYQ,OAAOI,YAAY,GAC1CC,EAAYb,EAAYQ,OAAOM,cAAc,GAG7CC,EAAcV,EAAcW,MAAK,SAAAC,GAAI,OAAIA,EAAOf,KAGlDgB,EAAoB,GACpBC,EAAkB,GAatB,OAXIJ,GAAeN,EAAmB,IAAMI,EAAY,GAAKX,GAAeS,EAAW,GACrFO,EAAoB,0HACpBC,EAAkB,UACTJ,GACTG,EAAoB,mHACpBC,EAAkB,WAElBD,EAAoB,iDACpBC,EAAkB,YAIlB,yBAAKlC,UAAU,gBACb,sDAA4BgB,GAC5B,yBAAKhB,UAAU,qBACb,2BAAG,wDAAH,IAA0CiB,EAA1C,UACA,2BAAG,2DAAH,IAA6CG,EAAc,GAA3D,UACA,2BAAG,2DAAH,IAA6CA,EAAc,GAA3D,UACA,2BAAG,iEAAH,IAAmDI,EAAnD,KACA,2BAAG,yDAAH,IAA2CE,EAA3C,UACA,2BAAG,+CAAH,IAAiCE,EAAjC,SAEF,yBAAK5B,UAAS,+CAA0CkC,IACtD,2BAAID,MCSGE,EAtDD,WAmBZ,OACE,yBAAKnC,UAAU,gBACb,yBAAKA,UAAU,qBACb,4BAAI,2DACJ,8QAKA,yGAEE,kBAAC,IAAD,CAAMoC,GAAG,oBAAoBC,QA5BP,WAC5BC,IAAQC,MAAM,CACZC,SAAU,aACVC,OAAQ,uCAyBJ,eAFF,KAMA,2BACE,yCADF,kIAMA,0DAEE,uBACEC,KAAK,mCACLL,QAlCe,SAACM,GACxBA,EAAEC,iBACFN,IAAQC,MAAM,CACZC,SAAU,WACVC,OAAQ,0BAEVI,OAAOC,SAASJ,KAAO,8BA0BjB,6BAFF,QClCOK,EARD,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACf,OACE,yBAAKhD,UAAU,SACb,2BAAIgD,KCUKC,EAZE,WAGb,IAAMC,EAAO,IAAIC,KAEjB,OACI,yBAAKnD,UAAU,aAAf,UACQkD,EAAKE,qBADb,cACuCF,EAAKG,wBCFrCC,EANC,kBACd,yBAAKtD,UAAU,WACb,qGCKWuD,EANA,kBACX,yBAAKvD,UAAU,UAAf,gBACiB,uBAAGwD,IAAI,sBAAsBC,OAAO,SAASf,KAAK,gCAAlD,iBCqGNgB,EA3FF,WAAO,IAAD,EACqBC,mBAAS,MAD9B,mBACV5C,EADU,KACG6C,EADH,OAEOD,qBAFP,mBAEV3C,EAFU,KAEJ6C,EAFI,OAGSF,qBAHT,mBAGVX,EAHU,KAGHc,EAHG,KAMXvD,EAAQ,uCAAG,WAAOoC,GAAP,6BAAAoB,EAAA,yDACfpB,EAAEC,iBAEIE,EAAWH,EAAEc,OAAOO,SAASlB,SAASmB,MAH7B,uBAMbH,EAAS,qCACTF,EAAe,MAPF,0CAabtB,IAAQC,MAAM,CACZC,SAAU,SACVC,OAAO,sBAAD,OAAwBK,KAfnB,UAmBaoB,IAAMC,IAAN,8DAC+BrB,IApB5C,YAmBPsB,EAnBO,QAuBIC,KAAKC,SAA+C,IAApCF,EAAYC,KAAKC,QAAQC,OAvB7C,wBAwBXT,EAAS,sBACTF,EAAe,MAzBJ,oCA6ByBQ,EAAYC,KAAKC,QAAQ,GAAvDE,EA7BK,EA6BLA,SAAUC,EA7BL,EA6BKA,UAAW/D,EA7BhB,EA6BgBA,KAC7BmD,EAAQnD,GA9BK,UAiCewD,IAAMC,IAAN,0DACyBK,EADzB,sBAC+CC,EAD/C,+JAjCf,QAiCPC,EAjCO,OAqCbd,EAAec,EAAcL,MAC7BP,EAAS,MAGHa,EAAaC,EAA6BF,EAAcL,MAC9D/B,IAAQC,MAAM,CACZC,SAAU,mBACVC,OAAO,aAAD,OAAe/B,EAAf,0BAAqCiE,KA5ChC,kDAgDbE,QAAQ7B,MAAR,MACAc,EAAS,yCACTF,EAAe,MAlDF,0DAAH,sDAuDRgB,EAA+B,SAACP,GACpC,IAAMpD,EAAcoD,EAAKnD,gBAAgBC,YACnC2D,EAAqBT,EAAK9C,OAAOwD,mBAAmB,GACpDC,EAAWX,EAAK9C,OAAOE,oBAAoB,GAGjD,OAAIqD,EAAqB7D,GAAe+D,EAAW,GAC1C,OAEF,OAGT,OACE,yBAAKhF,UAAU,QACb,kBAAC,EAAD,MACA,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAQiF,SAAT,CAAkBhB,MAAO,CAAE1D,WAAUQ,cAAaC,SAChD,kBAAC,EAAD,OACED,IAAgBiC,GAAS,kBAAC,EAAD,MAC1BjC,GAAe,kBAAC,EAAD,MACfiC,GAAS,kBAAC,EAAD,CAAOA,MAAOA,KAE1B,kBAAC,EAAD,SC/DOkC,EAjCS,WACtB,OACE,yBAAKlF,UAAU,QACb,kBAAC,EAAD,MAEA,yBAAKA,UAAU,WACf,kBAAC,EAAD,MAEE,yBAAKA,UAAU,qBACb,qEACA,oLAGA,4BACE,4BAAI,gDAAJ,0GACA,4BAAI,gDAAJ,iHACA,4BAAI,kDAAJ,iGACA,4BAAI,gEAAJ,8HACA,4BAAI,mEAAJ,gHACA,4BAAI,wDAAJ,0IAEF,4NAIF,kBAAC,EAAD,SCjBFmF,EAAa,WACjB,IAAMrC,EAAWsC,cAYjB,OATAC,qBAAU,WACR/C,IAAQgD,WAPQ,kBAQf,IAGHD,qBAAU,WACR/C,IAAQiD,KAAK,CAAEC,QAAS,WAAYC,KAAM3C,EAAS4C,SAAW5C,EAAS6C,WACtE,CAAC7C,IAGF,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO8C,KAAK,IAAIC,QAAS,kBAAC,EAAD,QACzB,kBAAC,IAAD,CAAOD,KAAK,oBAAoBC,QAAS,kBAAC,EAAD,WAalCC,EANH,kBACV,kBAAC,IAAD,KACE,kBAAC,EAAD,QChCJC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,W","file":"static/js/main.070649ab.chunk.js","sourcesContent":["import React from 'react'\n\nconst Wrapper = (props) => {\n    return (\n        <div className=\"wrapper\">\n            {props.children}\n        </div>\n    )\n}\n\nexport default Wrapper","import { createContext } from 'react'\n\n// Context lets you create one instance of the data that you want other components to use. This data can then be accessed by any component\n\nconst Context = createContext()\n\n\n\n\nexport default Context","import React from 'react'\n\nconst Header = () => (\n    <div className='header'>\n        <h1 className='header__title'> Cloud Inversion Checker </h1>\n    </div>\n)\n\n\nexport default Header","import React from 'react';\n\n\n\nconst Content = (props) => {\n    return(\n        <div className='content'>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Content;","import React, { useContext } from 'react';\nimport Context from '../Context';\n\nconst WeatherSearch = () => {\n  const { api_call } = useContext(Context);\n\n  return (\n    <div className=\"weather-search\">\n      <form onSubmit={api_call} className=\"weather-search__form\">\n        <input\n          name=\"location\"\n          autoComplete=\"off\"\n          className=\"weather-search__input\"\n          type=\"text\"\n          placeholder=\"Search city\"\n        />\n        <div className=\"weather-search__submit\">\n          <button className=\"weather-search__button\">&rarr;</button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default WeatherSearch;\n","import React, { useContext } from 'react';\nimport Context from '../Context';\n\nconst InversionLikelihood = () => {\n  const { weatherData, city } = useContext(Context);\n\n  if (!weatherData) return null;\n\n  // Extract necessary data\n  const surfaceTemp = weatherData.current_weather.temperature;\n  const pressureLevels = ['850hPa', '700hPa'];\n  const tempsAtLevels = pressureLevels.map((level) => {\n    return weatherData.hourly[`temperature_${level}`][0];\n  });\n\n  const relativeHumidity = weatherData.hourly.relativehumidity_2m[0];\n  const dewPoint = weatherData.hourly.dewpoint_2m[0];\n  const windSpeed = weatherData.hourly.windspeed_10m[0];\n\n  // Check for temperature inversion\n  const isInversion = tempsAtLevels.some(temp => temp > surfaceTemp);\n\n  // Assess likelihood\n  let likelihoodMessage = '';\n  let likelihoodClass = '';\n\n  if (isInversion && relativeHumidity > 80 && windSpeed < 3 && surfaceTemp <= dewPoint + 2) {\n    likelihoodMessage = 'High likelihood of a cloud inversion occurring due to strong temperature inversion, high humidity, and low wind speeds.';\n    likelihoodClass = 'likely'; // Apply \"likely\" class\n  } else if (isInversion) {\n    likelihoodMessage = 'Possible inversion, but conditions may not be ideal for cloud formation due to low humidity or high wind speeds.';\n    likelihoodClass = 'likely'; // Apply \"likely\" class but with a less certain message\n  } else {\n    likelihoodMessage = 'Low likelihood of a cloud inversion occurring.';\n    likelihoodClass = 'unlikely'; // Apply \"unlikely\" class\n  }\n\n  return (\n    <div className=\"weather-data\">\n      <h2>Inversion Analysis for {city}</h2>\n      <div className=\"weather-data__box\">\n        <p><strong>Surface Temperature:</strong> {surfaceTemp} 째C</p>\n        <p><strong>Temperature at 850 hPa:</strong> {tempsAtLevels[0]} 째C</p>\n        <p><strong>Temperature at 700 hPa:</strong> {tempsAtLevels[1]} 째C</p>\n        <p><strong>Relative Humidity at Surface:</strong> {relativeHumidity}%</p>\n        <p><strong>Dew Point at Surface:</strong> {dewPoint} 째C</p>\n        <p><strong>Wind Speed:</strong> {windSpeed} m/s</p>\n      </div>\n      <div className={`weather-data__box likelihood-message ${likelihoodClass}`}>\n        <p>{likelihoodMessage}</p>\n      </div>\n    </div>\n  );\n};\nexport default InversionLikelihood;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport ReactGA from 'react-ga4';\n\nconst About = () => {\n  // Track event for \"ideal-conditions\" link\n  const handleConditionsClick = () => {\n    ReactGA.event({\n      category: 'Navigation',\n      action: 'Clicked to view Ideal Conditions',\n    });\n  };\n\n  // Track event for email feedback link\n  const handleEmailClick = (e) => {\n    e.preventDefault();\n    ReactGA.event({\n      category: 'Feedback',\n      action: 'Clicked on email link',\n    });\n    window.location.href = 'mailto:soyeb717@gmail.com';\n  };\n\n  return (\n    <div className=\"weather-data\">\n      <div className=\"weather-data__box\">\n        <h2><strong>About Cloud Inversions</strong></h2>\n        <p>\n          A cloud inversion occurs when warmer air sits above cooler air, trapping moisture and clouds below. \n          This app analyzes the likelihood of a cloud inversion by examining atmospheric data such as temperature \n          profiles, humidity, and wind speed.\n        </p>\n        <p>\n          For more information on the ideal weather conditions for a cloud inversion, \n          <Link to=\"/ideal-conditions\" onClick={handleConditionsClick}> click here</Link>.\n        </p>\n\n        {/* Experimental Notice */}\n        <p>\n          <strong>Note:</strong> This app is experimental and is constantly being improved to enhance accuracy. \n          We appreciate any feedback to help us improve.\n        </p>\n\n        {/* Protected Email for Feedback */}\n        <p>\n          For feedback, please contact  \n          <a \n            href=\"mailto:soyeb717[at]gmail[dot]com\" \n            onClick={handleEmailClick}\n          >\n             soyeb717[at]gmail[dot]com\n          </a>.\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default About;\n","import React from 'react';\n\nconst Error = ({ error }) => {\n  return (\n    <div className=\"error\">\n      <p>{error}</p>\n    </div>\n  );\n};\n\nexport default Error;\n","import React from 'react'\n\n\nconst DateTime = () => {\n\n\n    const date = new Date()\n\n    return (\n        <div className='date-time'>\n            {`${date.toLocaleDateString()} - ${date.toLocaleTimeString()}`}\n        </div>\n    )\n}\n\nexport default DateTime","import React from 'react';\n\nconst Tagline = () => (\n  <div className=\"tagline\">\n    <p>Enter the name of a location to know if a cloud inversion is likely:</p>\n  </div>\n);\n\nexport default Tagline;\n","import React from 'react'\n\n\nconst Footer = () => (\n    <div className='footer'> \n        Developed by <a rel='noopener noreferrer' target='_blank' href=\"https://www.soyebpatel.co.uk\">Soyeb Patel</a>\n    </div>\n)\n\nexport default Footer","import React, { useState } from 'react';\nimport axios from 'axios';\nimport Context from '../Context';\nimport ReactGA from 'react-ga4';\n\nimport Header from './Header';\nimport Content from './Content';\nimport WeatherSearch from './WeatherSearch';\nimport InversionLikelihood from './InversionLikelihood';\nimport About from './About';\nimport Error from './Error';\nimport DateTime from './DateTime';\nimport Tagline from './Tagline';\nimport Footer from './Footer';\n\nconst Main = () => {\n  const [weatherData, setWeatherData] = useState(null);\n  const [city, setCity] = useState();\n  const [error, setError] = useState();\n\n  // Function to fetch atmospheric data\n  const api_call = async (e) => {\n    e.preventDefault();\n\n    const location = e.target.elements.location.value;\n\n    if (!location) {\n      setError('Please enter the name of the city');\n      setWeatherData(null);\n      return;\n    }\n\n    try {\n      // Track search event with Google Analytics\n      ReactGA.event({\n        category: 'Search',\n        action: `Location searched: ${location}`,\n      });\n\n      // Geocoding API to get latitude and longitude\n      const geoResponse = await axios.get(\n        `https://geocoding-api.open-meteo.com/v1/search?name=${location}`\n      );\n\n      if (!geoResponse.data.results || geoResponse.data.results.length === 0) {\n        setError('Location not found');\n        setWeatherData(null);\n        return;\n      }\n\n      const { latitude, longitude, name } = geoResponse.data.results[0];\n      setCity(name);\n\n      // Fetch atmospheric data including dew point and wind speed\n      const meteoResponse = await axios.get(\n        `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&hourly=temperature_2m,relativehumidity_2m,pressure_msl,temperature_850hPa,temperature_700hPa,dewpoint_2m,windspeed_10m&start=current&current_weather=true`\n      );\n\n      setWeatherData(meteoResponse.data);\n      setError(null);\n\n      // Track inversion result with Google Analytics based on likelihood\n      const likelihood = calculateInversionLikelihood(meteoResponse.data);\n      ReactGA.event({\n        category: 'Inversion Result',\n        action: `Location: ${name} - Likelihood: ${likelihood}`,\n      });\n      \n    } catch (err) {\n      console.error(err);\n      setError('An error occurred while fetching data');\n      setWeatherData(null);\n    }\n  };\n\n  // Simple function to determine inversion likelihood (mock logic)\n  const calculateInversionLikelihood = (data) => {\n    const surfaceTemp = data.current_weather.temperature;\n    const higherAltitudeTemp = data.hourly.temperature_850hPa[0];\n    const humidity = data.hourly.relativehumidity_2m[0];\n\n    // Example condition: if the temperature at 850hPa is higher than surface, and humidity is high\n    if (higherAltitudeTemp > surfaceTemp && humidity > 80) {\n      return 'High';\n    }\n    return 'Low';\n  };\n\n  return (\n    <div className=\"main\">\n      <Header />\n      <Content>\n        <DateTime />\n        <Tagline />\n        <Context.Provider value={{ api_call, weatherData, city }}>\n          <WeatherSearch />\n          {!weatherData && !error && <About />}\n          {weatherData && <InversionLikelihood />}\n          {error && <Error error={error} />}\n        </Context.Provider>\n        <Footer />\n      </Content>\n    </div>\n  );\n};\n\nexport default Main;\n","import React from 'react';\nimport Header from './Header';\nimport Footer from './Footer'; \nimport DateTime from './DateTime';\nconst IdealConditions = () => {\n  return (\n    <div className=\"main\">\n      <Header />\n\n      <div className=\"content\">\n      <DateTime />\n\n        <div className=\"weather-data__box\">\n          <h2>Ideal Conditions for Cloud Inversions</h2>\n          <p>\n            Cloud inversions require a specific set of atmospheric conditions to form. Here are the key conditions that favor the formation of a cloud inversion:\n          </p>\n          <ul>\n            <li><strong>Clear Skies:</strong> Sky conditions should be clear or with less than 25% cloud cover to allow the ground to cool rapidly.</li>\n            <li><strong>Light Winds:</strong> Winds should be calm or light, typically below 3 meters per second (6.7 mph), to maintain stable air layers.</li>\n            <li><strong>High Humidity:</strong> Relative humidity near the surface should be above 80-85% to support cloud or fog formation.</li>\n            <li><strong>Cold Overnight Temperatures:</strong> Surface temperatures should drop below 10째C (50째F) overnight, with a sharp difference compared to higher altitudes.</li>\n            <li><strong>Warmer Air at Higher Altitudes:</strong> Temperatures at higher altitudes (850 hPa) should be above 5째C (41째F) and warmer than at the surface.</li>\n            <li><strong>Weather Transitions:</strong> After a few days of cold, calm conditions, an approaching change to milder, wetter weather increases the chances of cloud inversion.</li>\n          </ul>\n          <p>\n            These factors combined create a stable atmospheric environment conducive to a cloud inversion, which often results in stunning views of fog or clouds trapped in valleys or low-lying areas.\n          </p>\n        </div>\n        <Footer />\n\n      </div>\n\n    </div>\n  );\n};\n\nexport default IdealConditions;\n","import React, { useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Routes, useLocation } from 'react-router-dom';\nimport ReactGA from 'react-ga4';\n\n// Components\nimport Wrapper from './components/Wrapper';\nimport Main from './components/Main';\nimport IdealConditions from './components/IdealConditions';\n\n// Initialize Google Analytics with your tracking ID\nconst TRACKING_ID = 'G-6Y949CPMQT'; // Replace with your GA Measurement ID\n\nconst AppContent = () => {\n  const location = useLocation();\n\n  // Initialize GA on first load\n  useEffect(() => {\n    ReactGA.initialize(TRACKING_ID);\n  }, []);\n\n  // Track pageviews when location changes\n  useEffect(() => {\n    ReactGA.send({ hitType: \"pageview\", page: location.pathname + location.search });\n  }, [location]);\n\n  return (\n    <Wrapper>\n      <Routes>\n        <Route path=\"/\" element={<Main />} />\n        <Route path=\"/ideal-conditions\" element={<IdealConditions />} />\n      </Routes>\n    </Wrapper>\n  );\n};\n\n// App component wrapping AppContent in the Router\nconst App = () => (\n  <Router>\n    <AppContent />\n  </Router>\n);\n\nexport default App;\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport \"./styles/styles.scss\"\nimport App from \"./App\"\n\nReactDOM.render(<App/>, document.getElementById(\"root\"))"],"sourceRoot":""}